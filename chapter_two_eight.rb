#[2.8]文字列についてもっと詳しく
#[2.8.1]文字列はstringクラスのオブジェクト
#文字列は全てstringクラスのオブジェクトになる。

puts 'abc'.class #=> string

#[2.8.2]%記法で文字列を作る
#文字列はシングルクォーテーションやダブルクォーテーションだけでなく、「%記法」で作ることができる。
#％記法を使うとシングルクォーテーションやダブルクォーテーションをエスケープする必要がない。

#「%q ! !」はシングルコーテーションで囲んだことと同じことになる。
puts %q!He said, "Don't speak."!

#「Q! !」はダブルコォーテーションで囲んだことと同じになる。(改行文字や式展開が使える)
something = "Hello."
puts %Q!He said, "#{something}"!

#「Q! !」ダブルクォーテーションで囲んだことと同じになる。
something = "Bye."
puts %!He said, "#{something}"!

#「!」以外にも「?, ⌃」など任意の「を区切りに使うことをできる。
#また「<,{,(,[」を使う場合は、終わりの区切り文字が対応するかっこになる。

puts %q?He said, "Don't speak."?
puts %q(He said, "Don't speak.")

#[2.8.3]ヒアドキュメント(業思考文字列リテラル)
#文字列は途中で改行することが出来る。
puts "Line 1,
Line 2"

puts 'Line 1
Line 2'

#しかし、複数行にわたる長い文字列を作成する場合はヒアドキュメントを使った方がスッキリ書くことができる。
<<識別子
1行目
2行目
3行目
識別子

a = <<TEXT
これはヒアドキュメントです。
複数行に渡る長い文字列を作成するのに便利です。
TEXT
puts a

#上に例では「TEXT」を使ったが、識別子は自由に付けられる。(ただし、記述する文字列の中に含まれない文字列を使う必要がある。)
#ex 識別子を「HTML」を使う場合
<<HTML
<div>
  <img src="sample.jpg">
</div>
HTML

#「<<-TEXT」のように「-」を入れると、最後の識別子をインデントさせることができる。メソッド内部でヒアドキュメントを使う場合など、識別子をインデントさせたい場合に便利。
def some_method
  <<-TEXT
    これはヒアドキュメントです。
    <<-を使うと最後の識別子をインデントさせることができます。
  TEXT
end
puts some_method

#Ruby2.3以降では「<<~TEXT」のように「~」を使うと内部の文字列をインデントさせても先頭の空白部分が無視させる。
def some_method
  <<~TEXT
    これはヒアドキュメントです。
    <<-を使うと内部の文字列のインデント部分が無視されます。
  TEXT
end
puts some_method

#ヒアドキュメントは式展開が可能。(ダブルクォーテーションで囲んでもOK)
name = 'Alice'
a = <<TEXT
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT
puts a

#識別子にシングルクォーテーションを付けると式展開が無効になる。
name = 'Alice'
a = <<'TEXT'
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT
puts a