#[2.4]数値
#Rubyでは人間が自然に理解しやすい形式で数値を作ることができます。
#正の整数
puts 10
#小数
puts 1.5
#負の整数
puts -3
#負の小数
puts -4.75

#「_」を含めることで大きな数の区切りをつけることができます。（＝_(アンダースコア)は無視される）
puts 1_000_000_000

#四則演算も可能
#足し算(+)
puts 10 + 20
#引き算(-)
puts 100 - 25
#掛け算(*)
puts 12 * 5
#割り算(/)
puts 20 / 5

#変数の手前に「-」をつけるとm、数値の正と負を反転できます。
n = 1
puts -n

#整数同士の割り算は小数点以下が切り捨てられるので注意が必要です。
puts 1 / 2
#本来は「0.5」ですが「0」と出力されます。
#そこで小数点以下が必要な場合はどちらかの値に小数点をつけて出力させます。
puts 1.0 / 2
puts 1 / 2.0
#変数に整数が入っている場合は「to_fメソッド」を呼ぶことで小数に変更できます。
n = 1
puts n.to_f
puts n.to_f / 2
#割り算の余りを求めたい場合は「%」を使うと求められます。
puts 8 % 3

#冪乗（＝累乗）を求める計算は「**」で求めることができる。
puts 2 ** 3

#[2.4.1]演算子による値の比較
#先程の文字列で同様、不等号や比較に用いる記号を使います。
puts 1 < 2
puts 1 <= 2
puts 1 > 2
puts 1 >= 2
puts 1 == 2
puts 1 == 1
puts 1 != 2

#[2.4.2]演算子の優先順位
#数学の四則演算の優先順位と同じです。
#以下の計算は(2 * 3) + (4 * 5) - (6 / 2)と同じ
puts 2 * 3 + 4 * 5 - 6 / 2
#数学同様、()を用いれ優先順位を変えることもできます。
puts 2 * (3 + 4) * (5 - 6) / 2

#[2.4.3]変数に格納された数値の増減
#Rubyには変数の値を増減させる「++」や「--」のような演算子はありません。
#これに近い演算子として「+=」と「-=」が用意されています。

#変数nの値を１増やす
n = 1
puts n += 1

#変数nの値を１減らす
n = 1
puts n -= 1

#同様に掛け算「*=」、割り算「/=」、冪乗「**=」でも使えます。
#変数nを３倍にする
n = 2
puts n *= 3

#変数nを２で割る
puts n /= 2

#変数nを２乗する
puts n **= 2

#[column]数値と文字列は暗黙的に変換されない
#Rubyでは「to_iメソッド」や「to_fメソッド」を使って明示的に文字列を数値に変換する必要があります。

# 数値と文字列を＋演算子で加筆できない
# puts 1 + '10' => `+': String can't be coerced into Integer (TypeError)
#文字列は数値に変換する必要がある。
puts 1 + '10'.to_i
#小数の場合
puts 1 + '10.5'.to_f

#反対に文字列に数値を連結することもできません。「to_sメソッド」を使って数値を文字列に変換する必要がある。
number = 3
# puts 'Number is ' + number  => `+': no implicit conversion of Integer into String (TypeError)
#数値は文字列に変換する必要がある。
puts 'Number is ' + number.to_s

#ただし、式典会を使った場合には自動的に「to_sメソッド」が呼び出される
puts "Number is #{number}"

#[column]小数を使う場合は丸め誤差に注意！
#丸め誤差とはPC内部で10進数ではなく2進数で計算しているのが丸め誤差の原因。
puts 0.1 * 3.0
#上記の計算も0.3にならない

#そのため下記のような真偽をといても正しく返ってこない
puts 0.1 * 3.0 == 0.3
puts 0.1 * 3.0 <= 0.3

#「Rational(有理数)クラス」を使うと期待した数値を得られます。
#Rationalクラスを使うと小数ではなく「10分の3」という計算結果が返る
puts 0.1r * 3.0r

#Rationalクラスを使えば期待した値が返ってくる！
puts 0.1r * 3.0r == 0.3
puts 0.1r * 3.0r <= 0.3

#変数に入っている場合は「rationalizeメソッド」を使えばRationalクラスを呼び出せる。
a = 0.1
b = 3.0
puts a.rationalize * b.rationalize

#小数に戻したい場合は結果に対して「to_fメソッド」を使う
puts (0.1r * 3.0r).to_f